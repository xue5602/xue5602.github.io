<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xue5602.github.io/"/>
  <updated>2018-12-10T14:46:59.652Z</updated>
  <id>https://xue5602.github.io/</id>
  
  <author>
    <name>tina</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux服务器上安装8.x版本node</title>
    <link href="https://xue5602.github.io/2018/12/10/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%858.x%E7%89%88%E6%9C%ACnode/"/>
    <id>https://xue5602.github.io/2018/12/10/linux服务器上安装8.x版本node/</id>
    <published>2018-12-10T07:44:50.000Z</published>
    <updated>2018-12-10T14:46:59.652Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --><p>安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class="line">sudo yum -y install nodejs</span><br><span class="line">执行 node -v  检查node是否安装成功</span><br></pre></td></tr></table></figure><p></p><p>报错<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Loaded plugins: fastestmirror, refresh-packagekit, security</span><br><span class="line">Setting up Install Process</span><br><span class="line">Determining fastest mirrors</span><br><span class="line"> * base: mirrors.zju.edu.cn</span><br><span class="line"> * extras: mirrors.skyshe.cn</span><br><span class="line"> * updates: mirrors.zju.edu.cn</span><br><span class="line">No package available.</span><br><span class="line">Error: Nothing to do</span><br></pre></td></tr></table></figure><p></p><p>解决<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><p></p><p>什么是EPEL?<br>EPEL的全称叫 Extra Packages for Enterprise Linux 。</p><p>遇到的问题:<br>node -v 查看node版本时发现node的版本为6.x</p><p>项目需求：安转7.6.0以上的node</p><p>解决过程<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. yum remove nodejs npm -y</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2.进入usr/local目录  </span><br><span class="line"></span><br><span class="line">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.解压</span><br><span class="line">sudo tar -xvf node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4.重命名</span><br><span class="line">mv node-v8.0.0-linux-x64 node</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.进入node/bin目录</span><br><span class="line">ls   </span><br><span class="line">./node -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6.建立软链接（可以在任何目录下执行 node 和 npm 命令）</span><br><span class="line">sudo ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">sudo ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure><p>注：<br>安装wget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --&gt;&lt;p&gt;安装&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="linux" scheme="https://xue5602.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>puppeteer初探</title>
    <link href="https://xue5602.github.io/2018/12/09/puppeteer%E5%88%9D%E6%8E%A2/"/>
    <id>https://xue5602.github.io/2018/12/09/puppeteer初探/</id>
    <published>2018-12-09T04:24:02.000Z</published>
    <updated>2018-12-10T04:54:34.305Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --><p>导语：我们日常使用的浏览器步骤为：启动浏览器、打开一个网页、进行交互。无头浏览器则是通过执行脚本来模拟真实的浏览器使用场景。<br>puppeteer相关文章：</p><ol><li><a href="https://juejin.im/post/59e5a86c51882578bf185dba" target="_blank" rel="noopener">https://juejin.im/post/59e5a86c51882578bf185dba</a></li><li><a href="https://www.jianshu.com/p/2f04f9d665ce" target="_blank" rel="noopener">https://www.jianshu.com/p/2f04f9d665ce</a></li></ol><p>无头浏览器—-headless Chrome</p><ul><li>Puppeteer 使用 DevTools 协议 与浏览器进行通信</li><li>对网页进行截图保存为图片或pdf</li><li>抓取单页应用(SPA)执行并渲染(解决传统 HTTP 爬虫抓取单页应用难以处理异步请求的问题)</li><li>做表单的自动提交、UI的自动化测试、模拟键盘输入等</li><li>用浏览器自带的一些调试工具和性能分析工具帮助我们分析问题</li><li>在最新的无头浏览器环境里做测试、使用最新浏览器特性</li></ul><p>安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set puppeteer_download_host=https://npm.taobao.org/mirrors</span><br><span class="line">npm i puppeteer -S</span><br></pre></td></tr></table></figure><p></p><p>简单示例<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require (&apos;puppeteer&apos;)</span><br><span class="line">(async ()=&gt;&#123;</span><br><span class="line">    const browser = await puppeteer.launch(&#123;headless:false&#125;);  // 生成一个browser实例</span><br><span class="line">    const page = await browser.newPage();</span><br><span class="line">    await page.goto(&apos;http://www.baidu.com&apos;);</span><br><span class="line">    await page.screenshot(&#123;path:&apos;baidu.png&apos;&#125;);</span><br><span class="line">    await page.pdf(&#123;path: &apos;baidu.pdf&apos;, format: &apos;A4&apos;&#125;);</span><br><span class="line">    await browser.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>page.evaluate(pageFunction, …args):向页面注入函数<br><code>`</code><br>const puppeteer = require(‘puppeteer’);<br>(async () =&gt; {<br>const browser = await puppeteer.launch();<br>const page = await browser.newPage();<br>await page.goto(‘<a href="http://www.baidu.com&#39;&#39;)" target="_blank" rel="noopener">http://www.baidu.com&#39;&#39;)</a>;<br>const dimensions = await page.evaluate(() =&gt; {<br>return {<br>width: document.documentElement.clientWidth,<br>height: document.documentElement.clientHeight,<br>deviceScaleFactor: window.devicePixelRatio<br>};<br>});</p><p>console.log(‘Dimensions:’, dimensions);<br>await browser.close();<br>})();</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --&gt;&lt;p&gt;导语：我们日常使用的浏览器步骤为：启动浏览器、打开一个网页、进行交互。无头浏览器则是通过执行脚本来模拟真实的浏览器使用场景。&lt;br&gt;puppeteer相关文
      
    
    </summary>
    
      <category term="浏览器" scheme="https://xue5602.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>linux命令</title>
    <link href="https://xue5602.github.io/2018/12/01/linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://xue5602.github.io/2018/12/01/linux命令/</id>
    <published>2018-12-01T03:28:15.000Z</published>
    <updated>2018-12-10T13:43:13.640Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --><p>curl命令：该命令是一个利用url规则在命令行下工作的文件传输工具，支持文件的上传和下载。curl支持http、https、ftp等协议<br>语法<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl（选项）（参数）</span><br></pre></td></tr></table></figure><p></p><p>系统中没有curl可以使用yum install curl安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl url --slient （将下载文件输出到终端，所有的下载数据写入到stdout；--slient不显示进度信息）</span><br><span class="line">curl http://man.linuxde.net/test.iso -o filename.iso --progress（-o是将下载的数据写入到文件，必须使用文件的绝对路径；--progress显示进度条）</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum [options] [command] [package...]</span><br><span class="line">options: 可选项，（-h帮助，-y当安装过程提示全部选择yes，-q不显示安装过程）</span><br><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure><p>常用命令<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. ls 列出文件或文件目录</span><br><span class="line">2. cd    切换目录</span><br><span class="line">3. mkdir       创建文件夹</span><br><span class="line">4. unzip ***.zip     解压 .zip文件到当前目录（若提示找不到命令unzip，需要执行yum install -y unzip zip）</span><br><span class="line">5. tar -xvf  ***.tar   解压 .tar文件到当前目录</span><br><span class="line">6. tar xvJf   ***.tar.xz   解压 .tar.xz文件到当前目录</span><br><span class="line">7. rm -r    文件夹名称       -f  文件夹名称    删除文件夹 </span><br><span class="line">8. rm   文件名      删除文件</span><br><span class="line">9. cat  文件名      查看文件内容</span><br><span class="line">10. vi 文件名      进入文件,按下 i 键 ，出现 -- INSERT-- 就可以编辑了,按esc之后输入:wq, 保存并退出编辑模式 </span><br><span class="line">11. lsof -i  tcp:端口号  查看端口号 被哪个进程占用 （yum install lsof）  kill -9 端口号   杀掉进程</span><br><span class="line">12. pwd 查看当前文件的目录</span><br><span class="line">13. lsb_release -a  获取linux操作系统</span><br><span class="line">14. df -h  磁盘空间</span><br><span class="line">15. echo $LANG    查看linux下当前使用语言命令</span><br><span class="line">16. sudo -i 切换root用户</span><br><span class="line">17. mv 文件名 移动目的地文件名 （移动文件、重命名文件）</span><br><span class="line">18. yum remove nodejs （卸载node）</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --&gt;&lt;p&gt;curl命令：该命令是一个利用url规则在命令行下工作的文件传输工具，支持文件的上传和下载。curl支持http、https、ftp等协议&lt;br&gt;语法&lt;br
      
    
    </summary>
    
      <category term="linux" scheme="https://xue5602.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://xue5602.github.io/2018/07/23/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xue5602.github.io/2018/07/23/Hexo搭建个人博客/</id>
    <published>2018-07-22T22:10:48.000Z</published>
    <updated>2018-12-02T12:48:58.437Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --><p>1 准备工作<br>. 有一个github账号<br>. 安装node.js<br>. 安装git</p><p>2 搭建github博客<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">新建一个名为 你的用户名.github.io 的仓库。</span><br></pre></td></tr></table></figure><p></p><p>3 配置SSH key<br>配置ssh key的原因：提交代码时需要将本地和远程仓库进行连接，直接使用用户名和密码不太安全。所以需要用ssh key解决本地和服务器连接的问题。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ～/.ssh    检测本地已经存在的ssh密钥</span><br></pre></td></tr></table></figure><p></p><p>如果提示：不存在该文件夹，则说明是第一次使用github<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C   “邮件地址”</span><br></pre></td></tr></table></figure><p></p><p>（连续三次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开github主页，进入setting-&gt;SSH and GPG key -&gt;new ssh key）<br>此时，还需要配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config —-global  user.name “昵称”</span><br><span class="line">git config —-global  user.email  “邮箱”</span><br></pre></td></tr></table></figure><p></p><p>4 使用hexo编写个人博客<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装： npm install -g hexo</span><br><span class="line">初始化： npm init blog</span><br><span class="line">生成静态文件： hexo g</span><br><span class="line">启动服务器： hexo s</span><br><span class="line">部署到github： hexo d</span><br><span class="line">使用hexo d 的前提是安装了一个插件： npm install hexo-deployer-git –-save</span><br></pre></td></tr></table></figure><p></p><p>5 hexo 常见的口令<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new “” 新建文章</span><br><span class="line">hexo new page “” 新建页面</span><br><span class="line">hexo generate 生成静态文件到public目录</span><br><span class="line">hexo deploy 部署到github</span><br><span class="line">hexo version 查看hexo的版本号</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 10 2018 22:47:18 GMT+0800 (CST) --&gt;&lt;p&gt;1 准备工作&lt;br&gt;. 有一个github账号&lt;br&gt;. 安装node.js&lt;br&gt;. 安装git&lt;/p&gt;&lt;p&gt;2 搭建github博客&lt;br&gt;&lt;/p&gt;&lt;f
      
    
    </summary>
    
      <category term="hexo" scheme="https://xue5602.github.io/categories/hexo/"/>
    
    
  </entry>
  
</feed>
