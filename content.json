{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"tina","url":"https://xue5602.github.io"},"pages":[],"posts":[{"title":"node.js安装之windows篇","slug":"node.js安装之windows篇","date":"2018-12-15T09:34:29.000Z","updated":"2018-12-15T09:49:00.034Z","comments":true,"path":"2018/12/15/node.js安装之windows篇/","link":"","permalink":"https://xue5602.github.io/2018/12/15/node.js安装之windows篇/","excerpt":"","text":"1官网下载windows版本的nodejs并进行安装（d:\\program file\\nodejs）1安装完成后，win+r进入终端测试安装是否完成 node -v npm -v12配置npm全局模块的存放路径以及缓存路径进入nodejs目录：分别创建node_global和node_cach两个文件夹123自定义npm全局路径（设置成功后通过npm安转的包都会存放在node_global文件夹下面）npm config set prefix &quot;D:\\program files\\nodejs\\node_global&quot; npm config set cach &quot;D:\\program files\\nodejs\\node_cache&quot;配置环境变量 &quot;我的电脑&quot;-&gt; &quot;属性&quot;-&gt;&quot;高级系统设置&quot;-&gt;&quot;高级&quot;-&gt;&quot;环境变量&quot; 系统环境变量下新建 NODE_PATH = D:\\program files\\nodejs\\node_global\\node_modules 由于改变了modules的默认地址，所以上面的用户变量也需要跟着改变，用户变量PATH修改为D:\\program files\\nodejs\\node_global\\ 注意： 1.如果不修改用户变量的值，将会导致使用module的时候出现“xxx不是内部或外部命令，也不是可运行的程序或批处理的文件”。 2. 因为配置的环境变量涉及到全局，所以配置完成后需要重启计算机。 参考文献：https://www.jianshu.com/p/03a76b2e7e00","categories":[{"name":"node","slug":"node","permalink":"https://xue5602.github.io/categories/node/"}],"tags":[]},{"title":"linux服务器上安装8.x版本node","slug":"linux服务器上安装8.x版本node","date":"2018-12-10T07:44:50.000Z","updated":"2018-12-15T09:37:36.473Z","comments":true,"path":"2018/12/10/linux服务器上安装8.x版本node/","link":"","permalink":"https://xue5602.github.io/2018/12/10/linux服务器上安装8.x版本node/","excerpt":"","text":"方法一：使用curl安装123curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -sudo yum -y install nodejs执行 node -v 检查node是否安装成功方法二：使用wget安装12345678910111213141516171.进入usr/local目录 wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz2.解压sudo tar -xvf node-v8.0.0-linux-x64.tar.xz 3.重命名mv node-v8.0.0-linux-x64 node4.进入node/bin目录ls ./node -v5.建立软链接（可以在任何目录下执行 node 和 npm 命令）sudo ln -s /usr/local/node/bin/node /usr/bin/nodesudo ln -s /usr/local/node/bin/npm /usr/bin/npm注：安装wget1yum -y install wget可能的报错12345678Loaded plugins: fastestmirror, refresh-packagekit, securitySetting up Install ProcessDetermining fastest mirrors * base: mirrors.zju.edu.cn * extras: mirrors.skyshe.cn * updates: mirrors.zju.edu.cnNo package available.Error: Nothing to do报错解决1yum install -y epel-release什么是EPEL?EPEL的全称叫 Extra Packages for Enterprise Linux 。遇到的问题:node -v 查看node版本时发现node的版本为6.x项目需求：安转7.6.0以上的node解决过程 卸载node11. yum remove nodejs npm -y123452.手动删除残余进入 /usr/local/lib 删除所有 node 和 node_modules文件夹进入 /usr/local/include 删除所有 node 和 node_modules 文件夹检查 ~ 文件夹里面的&quot;local&quot; &quot;lib&quot; &quot;include&quot; 文件夹，然后删除里面的所有 &quot;node&quot; 和 &quot;node_modules&quot; 文件夹可以使用以下命令查找 $ find ~/ -name node $ find ~/ -name node_modules1234563. 进入/usr/local/bin 删除node可执行文件 删除: /usr/local/bin/npm删除: /usr/local/share/man/man1/node.1删除: /usr/local/lib/dtrace/node.d删除: rm -rf /home/[homedir]/.npm删除: rm -rf /home/root/.npm 升级node121.安装nnpm install -g n122.安装最新版n latest123.安装指定版本n 8.11.3[参考文献] https://segmentfault.com/a/1190000015302680","categories":[{"name":"node","slug":"node","permalink":"https://xue5602.github.io/categories/node/"}],"tags":[]},{"title":"puppeteer初探","slug":"puppeteer初探","date":"2018-12-09T04:24:02.000Z","updated":"2018-12-11T07:05:42.229Z","comments":true,"path":"2018/12/09/puppeteer初探/","link":"","permalink":"https://xue5602.github.io/2018/12/09/puppeteer初探/","excerpt":"","text":"导语：我们日常使用的浏览器步骤为：启动浏览器、打开一个网页、进行交互。无头浏览器则是通过执行脚本来模拟真实的浏览器使用场景。headless Chrome1234561. Puppeteer 使用 DevTools 协议 与浏览器进行通信2. 对网页进行截图保存为图片或pdf3. 抓取单页应用(SPA)执行并渲染(解决传统 HTTP 爬虫抓取单页应用难以处理异步请求的问题)4. 做表单的自动提交、UI的自动化测试、模拟键盘输入等5. 用浏览器自带的一些调试工具和性能分析工具帮助我们分析问题6. 在最新的无头浏览器环境里做测试、使用最新浏览器特性安装12npm config set puppeteer_download_host=https://npm.taobao.org/mirrorsnpm i puppeteer -S简单示例123456789101112const puppeteer = require(&apos;puppeteer&apos;);async function run() &#123; const browser = await puppeteer.launch(&#123;headless:false&#125;); const page = await browser.newPage(); await page.goto(&apos;https://www.baidu.com&apos;); await page.screenshot(&#123;path: &apos;baidu.png&apos;&#125;); await page.pdf(&#123;path: &apos;baidu.pdf&apos;, format: &apos;A4&apos;&#125;); browser.close();&#125;run();page.evaluate(pageFunction, …args):向页面注入函数12345678910111213141516const puppeteer = require(&apos;puppeteer&apos;);(async () =&gt; &#123; const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(&apos;http://www.baidu.com&apos;&apos;); const dimensions = await page.evaluate(() =&gt; &#123; return &#123; width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, deviceScaleFactor: window.devicePixelRatio &#125;; &#125;); console.log(&apos;Dimensions:&apos;, dimensions); await browser.close();&#125;)(); 参考文献https://juejin.im/post/59e5a86c51882578bf185dbahttps://www.jianshu.com/p/2f04f9d665cehttp://csbun.github.io/blog/2017/09/puppeteer/https://juejin.im/entry/5a3aa0e86fb9a045076fd385https://juejin.im/post/59ca032d51882536d37f3154","categories":[{"name":"浏览器","slug":"浏览器","permalink":"https://xue5602.github.io/categories/浏览器/"}],"tags":[]},{"title":"linux命令","slug":"linux命令","date":"2018-12-01T03:28:15.000Z","updated":"2018-12-10T13:43:13.640Z","comments":true,"path":"2018/12/01/linux命令/","link":"","permalink":"https://xue5602.github.io/2018/12/01/linux命令/","excerpt":"","text":"curl命令：该命令是一个利用url规则在命令行下工作的文件传输工具，支持文件的上传和下载。curl支持http、https、ftp等协议语法1curl（选项）（参数）系统中没有curl可以使用yum install curl安装12curl url --slient （将下载文件输出到终端，所有的下载数据写入到stdout；--slient不显示进度信息）curl http://man.linuxde.net/test.iso -o filename.iso --progress（-o是将下载的数据写入到文件，必须使用文件的绝对路径；--progress显示进度条）123yum [options] [command] [package...]options: 可选项，（-h帮助，-y当安装过程提示全部选择yes，-q不显示安装过程）yum -y install nodejs常用命令1234567891011121314151617181. ls 列出文件或文件目录2. cd 切换目录3. mkdir 创建文件夹4. unzip ***.zip 解压 .zip文件到当前目录（若提示找不到命令unzip，需要执行yum install -y unzip zip）5. tar -xvf ***.tar 解压 .tar文件到当前目录6. tar xvJf ***.tar.xz 解压 .tar.xz文件到当前目录7. rm -r 文件夹名称 -f 文件夹名称 删除文件夹 8. rm 文件名 删除文件9. cat 文件名 查看文件内容10. vi 文件名 进入文件,按下 i 键 ，出现 -- INSERT-- 就可以编辑了,按esc之后输入:wq, 保存并退出编辑模式 11. lsof -i tcp:端口号 查看端口号 被哪个进程占用 （yum install lsof） kill -9 端口号 杀掉进程12. pwd 查看当前文件的目录13. lsb_release -a 获取linux操作系统14. df -h 磁盘空间15. echo $LANG 查看linux下当前使用语言命令16. sudo -i 切换root用户17. mv 文件名 移动目的地文件名 （移动文件、重命名文件）18. yum remove nodejs （卸载node）","categories":[{"name":"linux","slug":"linux","permalink":"https://xue5602.github.io/categories/linux/"}],"tags":[]},{"title":"Hexo搭建个人博客","slug":"Hexo搭建个人博客","date":"2018-07-22T22:10:48.000Z","updated":"2018-12-02T12:48:58.437Z","comments":true,"path":"2018/07/23/Hexo搭建个人博客/","link":"https://xue5602.github.io/2018/07/23/Hexo搭建个人博客/","permalink":"https://xue5602.github.io/2018/07/23/Hexo搭建个人博客/","excerpt":"","text":"1 准备工作. 有一个github账号. 安装node.js. 安装git2 搭建github博客1新建一个名为 你的用户名.github.io 的仓库。3 配置SSH key配置ssh key的原因：提交代码时需要将本地和远程仓库进行连接，直接使用用户名和密码不太安全。所以需要用ssh key解决本地和服务器连接的问题。1cd ～/.ssh 检测本地已经存在的ssh密钥如果提示：不存在该文件夹，则说明是第一次使用github1ssh-keygen -t rsa -C “邮件地址”（连续三次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开github主页，进入setting-&gt;SSH and GPG key -&gt;new ssh key）此时，还需要配置：12git config —-global user.name “昵称”git config —-global user.email “邮箱”4 使用hexo编写个人博客123456安装： npm install -g hexo初始化： npm init blog生成静态文件： hexo g启动服务器： hexo s部署到github： hexo d使用hexo d 的前提是安装了一个插件： npm install hexo-deployer-git –-save5 hexo 常见的口令12345hexo new “” 新建文章hexo new page “” 新建页面hexo generate 生成静态文件到public目录hexo deploy 部署到githubhexo version 查看hexo的版本号","categories":[{"name":"hexo","slug":"hexo","permalink":"https://xue5602.github.io/categories/hexo/"}],"tags":[]}]}